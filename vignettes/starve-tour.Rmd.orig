---
title: "starve-tour"
output:
  rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{starve-tour}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```



# Introduction

```{r setup}
set.seed(4326)
library(starve)
```

The starve package implements a spatio-temporal generalized linear mixed model for analyzing discrete-time, continuous-space data.
Throughout this vignette we will refer to the time unit as year/yearly, although any other regular unit (daily, monthly, etc.) can be used.
Functionality includes maximum likelihood inference, model-based spatial interpolation, forecasting and hindcasting, and simulations.
The sf, raster, and stars packages are tightly integrated into the starve package, allowing users to easily incorporate the starve package into their existing workflows.

The spatio-temporal GLMM is structured as a hierarchical model with 3 levels:

1. an observation equation describing the response distribution and covariate effects
2. a first level of spatio-temporal random effects describing the value of an unobserved spatio-temporal process, and
3. a second level of temporal random effects describing how the spatial surface changes as a whole from year to year.






# Data

The starve package expects data to be a sf data.frame with point geometries.
See the sf package.
The point geometries can have any valid geographic coordinate reference system, projected or unprojected, latitude/longitude or eastings/northings, or have no coordinate reference system (if appropriate).
In addition to the geometry column the sf data.frame should also include a response variable, the time index of the observation, and optionally any covariates desired.
The bird_survey dataset included in the starve package is an example of the necessary data format.

```{r data}
data(bird_survey)
bird_survey
```

The 'bird_survey' data holds the results of a yearly survey of Carolina wren in the state of Missouri, USA.
The number of individual birds encountered is stored in the 'cnt' column.
The year that each observation was taken in stored in the 'year' column.
The location of each observation, taken as the centroid of transect, is given in the 'geom' column.
We'll work with a smaller subset of the data in the vignette.

```{r}
bird_survey<- subset(bird_survey, year >= 2005)
```

## Creating and fitting a model

The 'strv_prepare' function uses a supplied sf data.frame to create a 'starve' object.


```{r create-model}
bird_model<- strv_prepare(
  cnt ~ time(year),
  data = bird_survey,
  distribution = "poisson"
)
```


The first argument supplied to 'strv_prepare' is a formula, similar those used in calls to 'lm' or 'glm'.
Formulae used in this package can include a number of terms with a special syntax, described more thoroughly in section [Formula syntax].
The response distribution must also be specified, defaulting to a Gaussian distribution.
The available response distributions are described in section [Response distribution] and can also be viewed in your R session with the command 'get_starve_distributions("distribution")'.
Optional arguments for strv_prepare are described in the help file for the function.

The new starve object is shown below.

```{r}
bird_model
```

```{r}
space_parameters(bird_model)$cnt["range", "par"]<- 80
space_parameters(bird_model)$cnt["range", "fixed"]<- TRUE
```

The individual components of a 'starve" object are explained in the following sections.
For now, note that printing the model give a summary of the model form, including the model formula, response distribution, link function, and an optimizer message that gives info on if/how the model is fit, and a summary of the data.
The 'strv_fit' function finds the maximum likelihood (ML) estimates of the model parameters.
The parameter values in the starve object will be the starting values used when finding the ML estimate, and unless you change them then default starting values will be used.
Details for changing these values is given in section [Modifying a starve model].

```{r fit-model}
bird_model<- strv_fit(
  bird_model,
  silent = TRUE
)
```

The output of the 'strv_fit' function is a 'starve' object with the ML parameter estimates, and you can see that the optimizer message has changed to tell you if the optimization procedure successfully converged.

```{r}
bird_model
```

```{r cache-model,include=F}
cache_model<- bird_model
```



# The starve model object

In this section we detail the various components of the 'starve' class.
The starve package makes use of S4 classes.
Users who are unfamiliar with S4 can think of an S4 class as a list, but elements of the list are accessed or modified using functions instead of the '$' or '[[' syntax.

## Parameter estimates

```{r convergence}
convergence(bird_model)
```

The convergence message is only available after fitting a model.
Some of the convergence messages that indicate successful convergence of the optimization routine are

- "X-convergence (3)"
- "Relative convergence (4)"
- "Both X- and relative convergence (5)"

Some messages that indicate the optimization routine failed to converge are

- "Singular convergence"
- "false convergence"
- "function evaluation limit reached"

See '?nlminb' and the PORT routines documentation for more details.


The parameters hold the parameter values/estimates, the standard errors of the parameter estimates (for a fitted model), and whether the parameters are held fixed in the model.
These quantities are held in the 'par', 'se', and 'fixed' columns, respectively.
The spatial covariance function, response distribution, and link function used are also part of the parameter descriptions.
The parameters are split into groups according to the different conceptual parts of the model.

```{r spatial-parameters}
covariance_function(bird_model)
space_parameters(bird_model)
```

The spatial parameters describe the spatial covariance function for each response variable.
The starve package uses a Matern covariance function with the following parameters:

- **sd**: a scale parameter. Higher values correspond to spatial surfaces with larger peaks and lower valleys. Must be greater than 0.
- **range**: a range parameter. Typically interpreted as the distance by which two locations need to be separated to be approximately uncorrelated.
- **nu**: a smoothness parameter. Higher values correspond to smoother spatial surfaces. The smoothness parameter is only estimated when the covariance function is 'matern'. Must be greater than 0.

```{r time-parameters}
time_parameters(bird_model)
```

The time parameters describe the temporal structure of the random effects.
An autoregressive order 1 AR(1) model is used:

- **mu**: A mean parameter. The overall mean or the baseline level of the random effects.
- **ar1**: A correlation parameter. Higher values correspond to adjacent years being more highly correlated. Must be between -1 and +1.
- **sd**: A scale parameter. Higher values correspond to more year-to-year variation. Must be greater than 0.

```{r response-distribution}
response_distribution(bird_model)
response_parameters(bird_model)
```

The response parameters describe e.g. the observation error, overdispersion, etc.
The specific parameters depend on the response distribution used and are described in section [Response distribution].


```{r fixed-effects}
fixed_effects(bird_model)
```

The fixed effects describe the effects of covariates, as in a generalized linear model.
A description of how to include covariates in a starve analysis is given in section [Including covariates].


```{r parameters}
parameters(bird_model)
```

You can extract all of the parameter values using the 'parameters' function.


## Random effect predictions

The time effects are non-spatial random effects that describe the year-to-year change of the spatio-temporal random effects.
Higher predicted values of the time effects correspond to years with a higher yearly mean, but the time effects themselves are not interpretable as yearly means.
The main purpose of the time effects is to induce a correlation structure in the spatio-temporal random effects.

```{r time-effects}
time_effects(bird_model)
```

The spatio-temporal random effects describe a spatial surface that varies from year to year.
The locations of the random effects act like the nodes in a mesh used in the INLA package, or basis functions used in a spline model.
The spatial surface at new locations are predicted using the values of these random effects.
The random effects are split into two groups.
The persistent graph random effects are placed at nodes that re-occur at the same location every year, and thus help
model the temporal structure of the model.
These random effects form a data cube, and we hold the random effect in a 'stars' object from the stars package.

```{r pg-re}
pg_re(bird_model)
```

The transient graph random effects are placed at nodes at the location of each data point within a year (unless that
  location is already a persistent graph node location), and only in the year that the data point is observed.
These random effects are necessary to know the value of the spatio-temporal random effect value at each location.
Since the transient graph node locations do not form a data cube, we hold them in a 'long_stars' object (from the starve package).
The default options for the 'strv_prepare' function use all of the data locations as the persistent graph locations, so in our example there are no transient graph random effects.

```{r tg-re}
tg_re(bird_model)
```

A list containing both sets of random effects can be extracted using the 'random_effects' function.

```{r random-effects}
random_effects(bird_model)
```

## Data

The data used in the model holds the data supplied to 'strv_prepare', and is held in a 'long_stars' object.
The 'predictions' slot contains a stars object for the random effect predictions (w), the response mean before applying the link function (linear), and the response mean after applying the link function (response).
Standard errors are also given for these predictions.
The 'locations' slot contains an sf object with columns for the response variable, any covariates, and the year column.
Note that the 'strv_prepare' function may sort the rows of the supplied data.

```{r dat}
data_predictions(bird_model)
```

The data held in the model can be easily accessed through the 'dat' function.

```{r}
dat(bird_model)
```

The rows of 'predictions' are in the same order as the rows of 'locations'.
We can add the random effect and response mean predictions to the data for plotting purposes.

```{r}
tmp<- cbind(
  do.call(
    cbind,
    values(data_predictions(bird_model))[, , 1]
  ),
  dat(bird_model)
)
colnames(tmp)[1:6]<- c("w", "w_se", "linear", "linear_se", "response", "response_se")
tmp
```



## Settings

The call to 'strv_prepare' can include various options that tweak the behaviour of the data pre-processing step.
Some of these options are stored as slots in model settings:

- **formula**: this is the formula supplied to 'strv_prepare'
- **n_neighbours**: the maximum number of parents that each node in the directed acyclic graph
- **distance_units**: units used for distance calculations. All distances in the model (for example max_distance, init_range, and graph distances) have these units.
- **max_distance**: the maximum distance that a location is allowed to be from nearest-neighbour parents

```{r settings}
settings(bird_model)
```






# Modifying a starve model


Changing the covariance function also resets the spatial parameters, and updates the value of nu to reflect the specific covariance function as a special case of the Matern covariance.

```{r change-covariance}
space_parameters(bird_model)

covariance_function(bird_model)<- "matern32"

space_parameters(bird_model)
```

You can change the parameter values by accessing the relevant set of parameters, and changing the 'par' column of that data.frame.
Parameter values can be set to any numeric value, but values outside the valid range will be replaced with a default value when fitting, simulating from, or predicting using the model.
For example a 'sd' (standard deviation) parameter must be positive; if it is set to a negative value then a default of +1 will be used instead.
You can also change the 'se' and 'fixed' columns in the same way.

```{r change-pars}
space_parameters(bird_model)
time_parameters(bird_model)

time_parameters(bird_model)$cnt[c("mu", "ar1"), "par"]<- c(10, 0.75)
space_parameters(bird_model)$cnt["range", "par"]<- 80
space_parameters(bird_model)$cnt["range", "fixed"]<- TRUE

space_parameters(bird_model)
time_parameters(bird_model)
```

Changing the response distribution will automatically update the response parameters, and will change the link function based on the valid range of the response mean for that distribution.
In the example above, the response distribution was changed from a Poisson distribution with no parameters and log link to a Gaussian distribution with a standard deviation parameter and identity link.

```{r change-distribution}
response_distribution(bird_model)
response_parameters(bird_model)
link_function(bird_model)

response_distribution(bird_model)<- "gaussian"

response_distribution(bird_model)
response_parameters(bird_model)
link_function(bird_model)
```

The link function can be changed to any implemented link function, even if it may give out of range predictions for the response distribution used in the model.
For example an identity link is allowed to be used with a Poisson response distribution even though an identity link may result in predictions with a negative mean.
Non-standard link functions should be used with caution, but are sometimes more desirable depending on the specific situation.

```{r change-link}
link_function(bird_model)

link_function(bird_model)<- "logit"

link_function(bird_model)
```

You can modify the data in a 'starve' object by adding columns for new variables or amending data.
However because the data are pre-processed changing the number of rows will require the creation of a new model object using the 'strv_prepare' function.

```{r change-data}
dat(bird_model)

dat(bird_model)$elev<- rnorm(nrow(dat(bird_model)))

dat(bird_model)
```

The model formula for including covariates such as the newly created 'elev' variable will be explained later.
Any variables used in the new formula must be present in the data held in the starve object, so add them before changing the formula.
The fixed effects parameters will be automatically updated to reflect the new formula.

```{r change-formula}
formula(bird_model)
fixed_effects(bird_model)

formula(bird_model)<- cnt ~ elev + time(year)

formula(bird_model)
fixed_effects(bird_model)
```

The distance units used in calculations can be changed to any valid distance unit provided by the 'units' package.
Distances are standardized within the model so changing the distance units should not affect inference or predictions.

```{r change-units}
space_parameters(bird_model)
graph(bird_model)
distance_units(bird_model)<- "ft"
space_parameters(bird_model)
graph(bird_model)
```


```{r include = F}
bird_model<- cache_model
```





# Predictions

Once a starve model has been fit, you can then use the 'strv_predict' function to predict the mean value of the response variable at unobserved locations and years.
This allows us to fill in the gaps and produce smooth maps of the response variable and forecast those maps into the future (or the past).
Predictions can be made as individual locations or as a raster.

## Point predictions

We first randomly sample a small number of points for predictions each year, and store those points as an sf data.frame.
The prediction locations can be the same every year or they can be different, and the years of the predictions can be different from those in the original data.

```{r predict-points}
pred_points<- st_sample(
  st_as_sfc(st_bbox(bird_survey)),
  size = 25
)
pred_points<- st_sf(
  geom = pred_points,
  year = rep(2012:2016, each = 5)
)
pred_points
```

The output is a strv_predictions object with two slots, a 'locations' slot containing an sf data.frame with any covariates used, the year, and the geometry, and a 'predictions' slot containing a stars object with attributes for:

- The spatio-temporal random effects **w**, and their standard errors **w_se**
- The response mean before applying the link function **linear**, and their standard errors **linear_se**
- the response mean after applying the link function **response**, and their standard errors **response_se**

```{r predict-sf}
sf_pred<- strv_predict(
  bird_model,
  pred_points
)
sf_pred
```

These predictions can be converted to a single sf data.frame fairly easily.

```{r}
tmp<- cbind(
  do.call(cbind,values(sf_pred)[, , 1]),
  locations(sf_pred)
)
colnames(tmp)[1:6]<- c("w", "w_se", "linear", "linear_se", "response", "response_se")
tmp
```


## Raster predictions

To predict a raster for a smooth prediction surface you can supply a raster object from the 'raster' package.

```{r}
library(raster)
pred_raster<- raster(
  bird_survey,
  nrow = 5,
  ncol = 5
)
pred_raster
```

The 'strv_predict' function handles rasters by extracting the centroid of each raster cell and giving point predictions at those centroids.
The output is a stars object with predictions at each raster location and every year.

```{r predict-raster}
strv_predict(
  bird_model,
  pred_raster
)
```

If the supplied raster has values, then predictions will only be made at cells that are not `r NA`.
See '?raster::mask' for details on creating raster with NAs.

```{r predict_mask_raster}
pred_raster[]<- 0
pred_raster[3, 3]<- NA
pred_raster
as.matrix(pred_raster)
pred_out<- strv_predict(
  bird_model,
  pred_raster
)
pred_out$response[, , 1, 1]
```

For raster predictions an additional 'time' option is available to specify which years to make predictions for, with the default behaviour being to predict every year between the earliest and latest year in the original dataset.

```{r forecast-raster}
strv_predict(
  bird_model,
  pred_raster,
  time = 2015:2019
)
```





# Simulation

Any 'starve' object can simulate new realizations of both the random effects and observations.
You can simulated from an already fitted model, or by first defining a new model from scratch.

Passing a fitted starve model to 'strv_simulate' simulates new time effects, new random effects, and new observations, using the parameter estimates (or whichever parameter values are current).
The output of 'strv_simulate' is itself a 'starve' object.
The parameter values are the same as those of the supplied model, however all standard errors have been replace with NA.
The time effects, random effects, and observations in the output are the simulated values.
No record of the previous values are stored.

```{r sim-bird}
sim_model<- strv_prepare(
  cnt ~ time(year),
  bird_survey,
  distribution = "poisson",
  fit = TRUE
)
sim_model<- strv_simulate(sim_model)
sim_model
parameters(sim_model)
```

To simulate from a completely new model you first have to create a template sf data.frame.
The template data.frame needs to contain a column for the response variable, a column for any covariates desired, a column for the time variable, and a geometry column.
The values in the response variable column are irrelevant however the covariate values will be the ones used in the model, the time and geometry columns are also used to set up the spatio-temporal layout of the simulations.
We will use a sf data.frame with a 4x4 grid of points replicated over 5 years.

```{r sim-new}
sim_df<- st_as_sf(
  data.frame(
    y = 0,
    t = rep(1:5, each = 16),
    ycoord = rep(1:4, 4),
    xcoord = rep(1:4, each = 4)
  ),
  coords = c("ycoord", "xcoord")
)
sim_df

sim_model<- strv_prepare(
  y ~ time(t),
  sim_df,
  distribution = "gaussian",
  fit = FALSE
)
```

Once a starve model is created from the template data, the parameter values and other model options (such as the covariance function, link function, response distribution, etc.) need to be set to their desired value.
After doing so you can simulate new random effects and data from the model.

```{r sim-new2}
time_parameters(sim_model)$y[c("mu", "ar1", "sd"), "par"]<- c(10, 0.7, 1)
space_parameters(sim_model)$y[c("sd", "range"), "par"]<- c(2, 0.5)
response_parameters(sim_model)$y["sd", "par"]<- 0.5
sim_model<- strv_simulate(sim_model)
dat(sim_model)
parameters(sim_model)
```



## Simulating random effects and observations

The default behaviour for simulations is to simulate new time effects, new random effects, and new data.
We show only the first few of each to show their difference before and after simulations.

```{r simulate-all}
time_effects(sim_model)
pg_re(sim_model)
head(dat(sim_model)$y)
sim_model<- strv_simulate(
  sim_model
)
time_effects(sim_model)
pg_re(sim_model)
head(dat(sim_model)$y)
```


## Simulating only observations

Simulations of only new data, conditional on the existing time effects and random effects, can be made by giving the 'conditional=TRUE' option.
Note that the time effects and random effects are the same before and after simulation, but that the response variable is different.

```{r simulate-obs}
time_effects(sim_model)
pg_re(sim_model)
head(dat(sim_model)$y)
sim_model<- strv_simulate(
  sim_model,
  conditional = TRUE
)
time_effects(sim_model)
pg_re(sim_model)
head(dat(sim_model)$y)
```







# Including covariates

## Creating a model

First we add two dummy covariates 'elev' and 'temp' to our original data.

```{r data-covar}
bird_survey$elev<- rnorm(
  nrow(bird_survey)
)
bird_survey$temp<- rnorm(
  nrow(bird_survey)
)
```

Then we'll fit a model, using the formula to include the new covariates.
The estimates for the covariate effects are given in the fixed effects parameters.
Offset terms can be included by setting 'fixed=TRUE' for that covariate in the fixed effects parameters.
All covariates that are named in the model formula are also present in the data stored in the starve object.

```{r covar-fit-elev}
bird_model<- strv_prepare(
  cnt ~ elev + temp + time(year),
  bird_survey,
  distribution = "poisson",
  fit = TRUE
)
fixed_effects(bird_model)
dat(bird_model)
```

More complex covariate effects such as interaction terms, transformations, and polynomial functions can be included in the model formula.

```{r covar-fit-elev-temp}
bird_model<- strv_prepare(
  cnt ~ I(abs(temp)) + poly(elev, 2) + time(year),
  bird_survey,
  distribution = "poisson",
  fit = TRUE
)
fixed_effects(bird_model)
dat(bird_model)
```


## Point predictions

We'll use the simpler covariate model for predictions.

```{r pred-covar-model}
bird_model<- strv_prepare(
  cnt ~ elev + temp + time(year),
  bird_survey,
  distribution = "poisson",
  fit = TRUE
)
```

We'll create an 'sf' object with our prediction points and years, along with the covariate values we want to use for predictions.

```{r covar-points}
pred_points<- st_sample(
  st_as_sfc(st_bbox(bird_survey)),
  size = 25
)
pred_points<- st_sf(
  geom = pred_points,
  year = rep(2012:2016, each = 5)
)
pred_points$elev<- rnorm(nrow(pred_points))
pred_points$temp<- rnorm(nrow(pred_points))
pred_points
```

The output is the same as predictions without covariates, but the covariates used are also included in the resulting 'long_stars' object.

```{r pred-covar-sf}
strv_predict(
  bird_model,
  pred_points
)
```





## Raster predictions

Covariates for raster predictions need to be supplied in a specific format: a list with a named element for each covariate.
The elements need to have the same name as the covariate.
Each covariate element needs to be a raster with the same geometry (dimensions, resolution, extent, coordinate reference system) as the raster template for the prediction locations.
Each layer of the covariate raster must correspond to a single year and be named "T####" where #### is replaced with the year.
The leading "T" in each layer name is necessary, and needs to specifically be a capitol "T".
For example, the layer "T2005" gives the covariate values for the year 2005.
Extra years of covariate values can be supplied, the 'strv_predict' function will only use the years for which predictions are made.

```{r covar-raster}
pred_raster<- raster(
  bird_survey,
  nrow = 5,
  ncol = 5
)
raster_elev<- stack(lapply(min(bird_survey$year):2019, function(year) {
  band<- pred_raster
  band[]<- rnorm(ncell(band))
  names(band)<- paste0("T", year)
  return(band)
}))
raster_temp<- stack(lapply(min(bird_survey$year):2019 ,function(year) {
  band<- pred_raster
  band[]<- rnorm(ncell(band))
  names(band)<- paste0("T", year)
  return(band)
}))
pred_covar<- list(
  elev = raster_elev,
  temp = raster_temp
)
pred_covar
```

For raster predictions, covariates are supplied to 'strv_predict' by giving the covariate raster list for the covariates is supplied as the third argument.
The output is the same as raster predictions without covariates, but the resulting stars raster for each year has  additional layer containing the covariate values.

```{r pred-covar-raster}
strv_predict(
  bird_model,
  pred_raster,
  pred_covar,
  time = min(bird_survey$year):2019
)
```



```{r include=F}
bird_model<- cache_model
```




# Options

## Formula syntax

A model formula specifies the response variable, the covariate effects, the temporal structure, and the spatial structure.
Put together a model formula should have this general format:

```{r eval=F}
response ~ covariates + sample.size(...) + time(...) + space(...)
```

Some options to the individual terms in the above model formula can be specified, as described below.

- **covariates**: Covariate effects can be specified as they would be in a typical call to 'lm' or 'glm'. Can be omitted from the formula if no covariates effects are desired.
- **sample.size(...)**: Used only for specific response distributions, for example the binomial distribution. A single variable name should be supplied. Can be omitted from the formula, and sample sizes are assumed to be equal to 1 for all observations.
- **time(...,type=)**: The name of the column holding the time information should be given. For a purely spatial model, create a dummy 'time' column with entries all equal to the same value. Valid options for the type option are:
    - **independent**: Each year in the model is assumed to be independent. The 'ar1' time parameter is fixed at 0.
    - **ar1** (default): An autoregressive order 1 model is used. The 'ar1' time parameter is freely estimated.
    - **rw**: A random walk is used. The 'ar1' time parameter is fixed at 1.
- **space(...covariance=,nu=)**: The name of the covariance function should be given to the covariance argument. If using the 'matern' covariance function, supplying a value to the nu option fixes the smoothness parameter nu at that value. Can be omitted from the formula, in which case the default exponential covariance function will be used.


## Response distribution

The valid response distributions can be found with the 'get_starve_distributions' function:

```{r starve-distributions}
get_starve_distributions("distribution")
```

- **gaussian**: Used for continuous data. Random effects and covariates determine the mean.
    - Parameters
        - **sd**: standard deviation of response variable.
    - Default link: identity

- **t**: Used for continuous data, similar to gaussian distribution with heavier tails. Random effects and covariates determine the mean.
    - Parameters
        - **df**: degrees of freedom.
    - Default link: identity

- **gamma**: Models strictly positive continuous data. Random effects and covariates determine the mean.
    - Parameters
        - **sd**: standard deviation of response variable.
    - Default link: log

- **lognormal**: Models strictly positive continuous data. Random effects and covariates determine the mean.
    - Parameters
        - **sd**: standard deviation of the log of response variable.
    - Default link: log

- **tweedie**: Models non-negative continuous data with a point mass at zero. Random effects and covariates determine the mean. The relationship between the mean and variance is given by $Var(Y) = \sigma^{2}\mu^{p}$.
    - Parameters
        - **dispersion**: The parameter $\sigma^{2}$ above.
        - **power**: The parameter $p$ above.
    - Default link: log

- **poisson**: Models non-negative integer data. Random effects and covariates determine the intensity/mean.
    - Parameters
        - N/A
    - Default link: log

- **negative binomial**: Model non-negative integer data with possible overdispersion. Random effects and covariates determine the mean.
    - Parameters
        - **overdispersion**: Values >1 correspond to overdispersion.
    - Default link: log

- **compois**: Models non-negative integer data with possible over- or underdispersion. Random effects and covariates determine the mean.
    - Parameters
        - **dispersion**: Values <1 correspond to underdispersion. Values >1 correspond to overdispersion
    - Default link: log

- **bernoulli**: Models binary data. Random effects and covariates determine the probability of success.
    - Parameters
        - N/A
    - Default link: logit

- **binomial**: Models the number of successes in *k* iid Bernoulli trials. Random effects and covariates determine the probability of success in a single trial. The number of trials *k* is specificed through the 'sample.size' term in the model formula.
    - Parameters
        - N/A
    - Default link: logit

- **atLeastOneBinomial**: Models the probability of observing at least one success in *k* iid Bernoulli trials. Random effects and covariates determine the probability of success in a single trial. The number of trials *k* is specified through the 'sample.size' term in the model formula.
    - Parameters
        - N/A
    - Default link: logit

## Link functions

The valid link functions can be found with the 'get_starve_distributions' function:

```{r starve-links}
get_starve_distributions("link")
```

- **identity**
    - Range (-$\infty$,$\infty$)

- **log**:
    - Range [0,$\infty$)

- **logit**:
    - Range [0,1]

## Spatial covariance function

All covariance functions currently available are special cases of the Matern covariance function.

```{r starve-covariances}
get_starve_distributions("covariance")
```

- **exponential**
    - Smoothness parameter nu = 0.5
- **matern32**
    - Smoothness parmaeter nu = 1.5
- **gaussian**
    - Limit of Matern covariance function as nu$\to\infty$
- **matern**
    - General covariance function with a freely estimated smoothness parameter nu. Evaluation is very slow compared to the named special cases.

## Holding parameters fixed

You can hold parameters fixed during model fitting.
Instead of being estimated the parameter value held in the starve model will be assumed "true".
We will hold the ar1 parameter fixed at 0, setting up each year in the model to be independent of the other years.
You can set as many parameters as you want to be held fixed, however the random effects cannot be fixed to particular values.
A model with all parameters held constant can still be fitted with the 'strv_fit' function, in which case the time effects and random effects will be estimated along with their standard errors.

```{r fixed-parameters}
parameters(bird_model)

time_parameters(bird_model)$cnt["ar1", "par"]<- 0
time_parameters(bird_model)$cnt["ar1", "fixed"]<- TRUE
bird_model<- strv_fit(bird_model, silent = TRUE)

parameters(bird_model)
```
